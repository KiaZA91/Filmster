@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page Genre</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
                {
            <InputText id="title" class="form-control me-2" @bind-Value="Model.Name" disabled placeholder="Title"></InputText>
                }
                else
                {
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Name" placeholder="Title"></InputText>
                }
            <ValidationMessage For="@(() => Model.Name)" />
        </div>



        @if (!Page.Equals(PageType.Delete))
                {
@*        <div class="mb-3">
                <InputText id="description" class="form-control me-2" @bind-Value="Model.Name" placeholder="Name"></InputText>
            <ValidationMessage For="@(() => Model.Name)" />
        </div>*@
        @*            <div class="mb-3">
        <InputText id="image-url" class="form-control me-2" @bind-Value="Model.FilmUrl" placeholder="Image Url"></InputText>
        <ValidationMessage For="@(() => Model.FilmUrl)" />
        </div>*@
@*        <div class="mb-3">
                <InputText id="Film-url" class="form-control me-2" @bind-Value="Model..Name" placeholder="Film Url"></InputText>
            <ValidationMessage For="@(() => Model.Title)" />
        </div>*@

        <InputSelect @bind-Value="Model.Id" class="form-control mb-3">
            <option value=0>Genre</option>
            @foreach (var genre in Genres)
            {
                    <option value="@genre.Id">@genre.Name</option>
            }
            </InputSelect>

@*            <div class="mb-3">
                <label>
                    <InputCheckbox @bind-Value="Model.Free" />
                    Free Film
                </label>
            </div>*@
            }
            <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
    </EditForm>
</div>

        @code {
        [Parameter] public GenreDTO Model { get; set; } = new();
        [Parameter] public string Page { get; set; } = string.Empty;
        [Parameter] public EventCallback<string> OnChange { get; set; }
        List<GenreDTO> Genres { get; set; } = new();

        protected override async Task OnInitializedAsync()
        {
            Genres = await AdminService.GetAsync<GenreDTO>("genre");
        }

        private async Task OnFormSubmit()
        {
            try
            {
                if (Page.Equals(PageType.Add))
                    await AdminService.CreateAsync<GenreDTO>("Genres", Model);
                else if (Page.Equals(PageType.Edit))
                await AdminService.EditAsync<GenreDTO>($"Genres/{Model.Id}", Model);
                else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<GenreDTO>($"Genres/{Model.Id}");
                await OnChange.InvokeAsync("");
            }
            catch
            {
                await OnChange.InvokeAsync("Couldn't create/edit/delete the genre.");
            }
        }

}
