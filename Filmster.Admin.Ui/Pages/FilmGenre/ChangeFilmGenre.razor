@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">

    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page FilmGenre</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputNumber id="FilmId" class="form-control me-2" @bind-Value="Model.FilmId" disabled placeholder="FilmId"></InputNumber>
            }
            else
            {
                <InputNumber id="FilmId" class="form-control me-2" @bind-Value="Model.FilmId" placeholder="FilmId"></InputNumber>
            }
            <ValidationMessage For="@(() => Model.FilmId)" />
        </div>

        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
    </EditForm>
</div>

@code {
    [Parameter] public FilmGenreDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    List<FilmGenreDTO> FilmId { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        FilmId = await AdminService.GetAsync<FilmGenreDTO>("filmId");
    }
    private async Task OnFormSubmit()
    {
        try
        {
            if (Page.Equals(PageType.Add))
                await AdminService.CreateAsync<FilmGenreDTO>("filmgenre", Model);
            else if (Page.Equals(PageType.Edit))
                await AdminService.EditAsync<FilmGenreDTO>($"filmgenre/{Model.FilmId}", Model);
            else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<FilmGenreDTO>($"filmgenre/{Model.FilmId}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the filmgenre.");
        }
    }
}


